import pygame
from pygame.locals import *
from sys import exit
from random import randint
from pygame.math import Vector2

pygame.init()

tamanho = 40
numero = 20

fonte = pygame.font.SysFont('Boink Let', 30)
fonte2 = pygame.font.SysFont('Arista', 60)
tela = pygame.display.set_mode((tamanho * numero, tamanho * numero))
relogio = pygame.time.Clock()

imagem_maca = pygame.image.load('maca.png').convert_alpha()

menu_principal = True
fimdejogo = False

class Cobra:
    def __init__(self):
        self.corpo = [Vector2(5, 10), Vector2(4, 10), Vector2(3, 10)]
        self.direcao = Vector2(0, 0)
        self.novo_bloco = False

        # Carregar sprites da cobra
        self.cabeca_cima = pygame.image.load('cabeca_cima.png').convert_alpha()
        self.cabeca_baixo = pygame.image.load('cabeca_baixo.png').convert_alpha()
        self.cabeca_esquerda = pygame.image.load('cabeca_esquerda.png').convert_alpha()
        self.cabeca_direita = pygame.image.load('cabeca_direita.png').convert_alpha()

        self.rabo_cima = pygame.image.load('rabo_cima.png').convert_alpha()
        self.rabo_baixo = pygame.image.load('rabo_baixo.png').convert_alpha()
        self.rabo_esquerda = pygame.image.load('rabo_esquerda.png').convert_alpha()
        self.rabo_direita = pygame.image.load('rabo_direita.png').convert_alpha()

        self.corpo_horizontal = pygame.image.load('corpo_horizontal.png').convert_alpha()
        self.corpo_vertical = pygame.image.load('corpo_vertical.png').convert_alpha()

        self.cima_esquerda = pygame.image.load('dobra_CE.png').convert_alpha()
        self.cima_direita = pygame.image.load('dobra_CD.png').convert_alpha()
        self.baixo_esquerda = pygame.image.load('dobra_BE.png').convert_alpha()
        self.baixo_direita = pygame.image.load('dobra_BD.png').convert_alpha()

        self.som_cobra = pygame.mixer.Sound('som_cobra.wav')

    def desenhar_cobra(self):
        self.sprites_cabeca()
        self.sprites_rabo()

        for index, bloco in enumerate(self.corpo):
            x_cobra = int(bloco.x * tamanho)
            y_cobra = int(bloco.y * tamanho)
            cobra = pygame.Rect(x_cobra, y_cobra, tamanho, tamanho)
            if index == 0:
                tela.blit(self.cabeca, cobra)
            elif index == len(self.corpo) - 1:
                tela.blit(self.rabo, cobra)
            else:
                bloco_anterior = self.corpo[index + 1] - bloco
                proximo_bloco = self.corpo[index - 1] - bloco
                if bloco_anterior.x == proximo_bloco.x:
                    tela.blit(self.corpo_vertical, cobra)
                elif bloco_anterior.y == proximo_bloco.y:
                    tela.blit(self.corpo_horizontal, cobra)
                else:
                    if bloco_anterior.x == -1 and proximo_bloco.y == -1 or bloco_anterior.y == -1 and proximo_bloco.x == -1:
                        tela.blit(self.cima_esquerda, cobra)
                    elif bloco_anterior.x == -1 and proximo_bloco.y == 1 or bloco_anterior.y == 1 e proximo_bloco.x == -1:
                        tela.blit(self.baixo_esquerda, cobra)
                    elif bloco_anterior.x == 1 e proximo_bloco.y == -1 ou bloco_anterior.y == -1 e proximo_bloco.x == 1:
                        tela.blit(self.cima_direita, cobra)
                    elif bloco_anterior.x == 1 e proximo_bloco.y == 1 ou bloco_anterior.y == 1 e proximo_bloco.x == 1:
                        tela.blit(self.baixo_direita, cobra)

    def sprites_cabeca(self):
        relacao_cabeca = self.corpo[1] - self.corpo[0]
        if relacao_cabeca == Vector2(0, 1):
            self.cabeca = self.cabeca_cima
        elif relacao_cabeca == Vector2(-1, 0):
            self.cabeca = self.cabeca_direita
        elif relacao_cabeca == Vector2(1, 0):
            self.cabeca = self.cabeca_esquerda
        elif relacao_cabeca == Vector2(0, -1):
            self.cabeca = self.cabeca_baixo

    def sprites_rabo(self):
        relacao_rabo = self.corpo[-2] - self.corpo[-1]
        if relacao_rabo == Vector2(0, 1):
            self.rabo = self.rabo_baixo
        elif relacao_rabo == Vector2(-1, 0):
            self.rabo = self.rabo_esquerda
        elif relacao_rabo == Vector2(1, 0):
            self.rabo = self.rabo_direita
        elif relacao_rabo == Vector2(0, -1):
            self.rabo = self.rabo_cima

    def mover_cobra(self):
        if self.novo_bloco:
            copia_corpo = self.corpo[:]
            copia_corpo.insert(0, copia_corpo[0] + self.direcao)
            self.corpo = copia_corpo[:]
            self.novo_bloco = False
        else:
            copia_corpo = self.corpo[:-1]
            copia_corpo.insert(0, copia_corpo[0] + self.direcao)
            self.corpo = copia_corpo[:]

    def adicionar_bloco(self):
        self.novo_bloco = True

    def cobra_comendo(self):
        self.som_cobra.play()

    def reiniciar(self):
        self.corpo = [Vector2(5, 10), Vector2(4, 10), Vector2(3, 10)]
        self.direcao = Vector2(0, 0)

class Maca:
    def __init__(self):
        self.aleatorio()

    def desenhar_maca(self):
        maca = pygame.Rect(int(self.posicao.x * tamanho), int(self.posicao.y * tamanho), tamanho, tamanho)
        tela.blit(imagem_maca, maca)

    def aleatorio(self):
        self.x = randint(0, numero - 1)
        self.y = randint(0, numero - 1)
        self.posicao = Vector2(self.x, self.y)

class Jogo:
    def __init__(self):
        self.cobra = Cobra()
        self.maca = Maca()
        self.pontos = 0

    def carregar(self):
        self.cobra.mover_cobra()
        self.colisao()
        self.perdeu()

    def desenhar_elementos(self):
        self.grama()
        self.maca.desenhar_maca()
        self.cobra.desenhar_cobra()

    def colisao(self):
        if self.maca.posicao == self.cobra.corpo[0]:
            self.maca.aleatorio()
            self.cobra.adicionar_bloco()
            self.cobra.cobra_comendo()
            self.pontos += 1
            self.aumentar_nivel()

        for bloco in self.cobra.corpo[1:]:
            if bloco == self.maca.posicao:
                self.maca.aleatorio()

    def perdeu(self):
        global fimdejogo
        if not 0 <= self.cobra.corpo[0].x < numero or not 0 <= self.cobra.corpo[0].y < numero:
            fimdejogo = True

        for bloco in self.cobra.corpo[1:]:
            if bloco == self.cobra.corpo[0]:
                fimdejogo = True

        if fimdejogo:
            self.exibir_game_over()

    def aumentar_nivel(self):
        global nivel, velocidade
        if self.pontos == 5:
            nivel = 2
            velocidade = 130
            pygame.time.set_timer(carregar_tela, velocidade)
        elif self.pontos == 10:
            nivel = 3
            velocidade = 110
            pygame.time.set_timer(carregar_tela, velocidade)

    def exibir_game_over(self):
        global fimdejogo
        fimjogo = fonte2.render('GAME OVER', True, (255, 0, 0))
        tela.blit(fimjogo, (tamanho * numero // 4, tamanho * numero // 3))
        recomecar = fonte.render('Pressione R para jogar novamente', True, (255, 255, 255))
        tela.blit(recomecar, (tamanho * numero // 8, tamanho * numero // 2))

    def mostrar_pontos(self):
        pontos = str(self.pontos)
        pontuacao = fonte.render(f'PONTOS: {pontos} - NÍVEL: {nivel}', True, (255, 255, 255))
        tela.blit(pontuacao, (2, 2))

    def grama(self):
        for linha in range(numero):
            if linha % 2 == 0:
                for coluna in range(numero):
                    if coluna % 2 == 0:
                        grama = pygame.Rect(coluna * tamanho, linha * tamanho, tamanho, tamanho)
                        pygame.draw.rect(tela, (167, 209, 61), grama)
            else:
                for coluna in range(numero):
                    if coluna % 2 != 0:
                        grama = pygame.Rect(coluna * tamanho, linha * tamanho, tamanho, tamanho)
                        pygame.draw.rect(tela, (167, 209, 61), grama)


nivel = 1
velocidade = 150

jogo = Jogo()

carregar_tela = pygame.USEREVENT
pygame.time.set_timer(carregar_tela, velocidade)

while True:
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            exit()

        if event.type == carregar_tela:
            if not fimdejogo:
                jogo.carregar()

        if event.type == KEYDOWN:
            if event.key == K_w:
                if jogo.cobra.direcao.y != 1:
                    jogo.cobra.direcao = Vector2(0, -1)

            if event.key == K_s:
                if jogo.cobra.direcao.y != -1:
                    jogo.cobra.direcao = Vector2(0, 1)

            if event.key == K_a:
                if jogo.cobra.direcao.x != 1:
                    jogo.cobra.direcao = Vector2(-1, 0)

            if event.key == K_d:
                if jogo.cobra.direcao.x != -1:
                    jogo.cobra.direcao = Vector2(1, 0)

            if event.key == K_r:
                fimdejogo = False
                jogo = Jogo()  # Reiniciar o jogo

    tela.fill((175, 215, 70))
    jogo.desenhar_elementos()
    jogo.mostrar_pontos()
    relogio.tick(60)
    pygame.display.flip()
